.TH NOCACHE "1" "March 2013" "nocache" ""
.SH NAME
nocache \- don't use Linux page cache on given command
.SH SYNOPSIS
nocache [\-n <n>] \fBcommand\fR [argument...]
.SH OPTIONS
.TP
\fB\-n <n>\fR "Set number of fadvise calls"
Execute the `posix_fadvise` system call \fB<n>\fR times in a row.
Depending on your machine, this might give better results (use it if in
your tests `nocache` fails to eradicate pages from cache properly).
.SH DESCRIPTION
The `nocache` tool tries to minimize the effect an application has on
the Linux file system cache. This is done by intercepting the `open`
and `close` system calls and calling `posix_fadvise` with the
`POSIX_FADV_DONTNEED` parameter. Because the library remembers which
pages (ie., 4K-blocks of the file) were already in file system cache
when the file was opened, these will not be marked as "don't need",
because other applications might need that, although they are not
actively used (think: hot standby).

.SH ALTERNATIVE: HOW TO USE CGROUPS TO RESTRICT CACHE USE
If your use case is a  backup processes that should not interfere with the
present state of the cache too much, consider using cgroups instead. They're
much cleaner and carry less overhead than this tool.

For example, if your system uses systemd, you can do:

\fBsystemd-run --scope --property=MemoryLimit=500M\fR -- \fIbackup command\fR

For more info, see the README on https://github.com/Feh/nocache
